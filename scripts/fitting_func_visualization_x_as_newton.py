import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# plot functions
x = np.linspace(0,6,1000)

def y1(x):
    y1 = - (7280819397581895*x**5)/9007199254740992 + (8491161797437655*x**4)/562949953421312 - (7561707968091103*x**3)/70368744177664 + (3286073751546417*x**2)/8796093022208 - (10496*x)/15 + 19666/21
    return y1

def y2(x):
    y2 = (736526189059573*x**5)/1125899906842624 - (8889918014445273*x**4)/1125899906842624 + (148250817811815*x**3)/8796093022208 + (8401734851712015*x**2)/70368744177664 - (72091*x)/120 + 28659/28
    return y2

def y3(x):
    y3 = - (788129934789767*x**5)/2251799813685248 + (4384186000886861*x**4)/562949953421312 - (4928477575170219*x**3)/70368744177664 + (2819814184301079*x**2)/8796093022208 - (846997120970271*x)/1099511627776 + 11252/11
    return y3

def y3(x):
    y3 = - (5329259559054581*x**5)/18014398509481984 + (8761974843212149*x**4)/1125899906842624 - (5238873039544805*x**3)/70368744177664 + (2921419054267833*x**2)/8796093022208 - (6423993309030311*x)/8796093022208 + 4116043197637143/4398046511104
    return y3

def y4(x):
    y4 = - (5329259559054581*x**5)/18014398509481984 + (8761974843212149*x**4)/1125899906842624 - (5238873039544805*x**3)/70368744177664 + (2921419054267833*x**2)/8796093022208 - (6423993309030311*x)/8796093022208 + 4116043197637143/4398046511104
    return y4

def y5(x):
    y5 = (127*x**5)/120 - (2197*x**4)/132 + (22687*x**3)/264 - (1022145991421549*x**2)/8796093022208 - (50429*x)/165 + 562673885566719/549755813888
    return y5

def y6(x):
    y6 = - (5254199565265141*x**5)/9007199254740992 + (6657309676443959*x**4)/562949953421312 - (1647668152023501*x**3)/17592186044416 + (6489784086612153*x**2)/17592186044416 - (51131*x)/66 + 1099076106936427/1099511627776
    return y6

def y7(x):
    y7 = - (5085314579239015*x**5)/4503599627370496 + (1393381099199715*x**4)/70368744177664 - (1164832614026103*x**3)/8796093022208 + (3806859099969231*x**2)/8796093022208 - (837142331524647*x)/1099511627776 + 41161/44
    return y7

def y8(x):
    y8 = - (47*x**5)/40 + (1397512597437435*x**4)/70368744177664 - (4522124732371681*x**3)/35184372088832 + (1832935861303807*x**2)/4398046511104 - (6801205761839483*x)/8796093022208 + 4436553217029145/4398046511104
    return y8

def y9(x):
    y9 = - (13*x**5)/60 + (1797601555811161*x**4)/562949953421312 - (7032609645391697*x**3)/281474976710656 + (39713*x**2)/264 - (4804492645798333*x)/8796093022208 + 2220004412501077/2199023255552
    return y9

def y10(x):
    y10 = - (29*x**5)/60 + (1247979016059905*x**4)/140737488355328 - (4473746220749549*x**3)/70368744177664 + (62047*x**2)/264 - (8961379606543403*x)/17592186044416 + 7161980753803047/8796093022208
    return y10

def y11(x):
    y11 = - (1989089835421901*x**5)/2251799813685248 + (8836608359764511*x**4)/562949953421312 - (3663172921339397*x**3)/35184372088832 + (5589517293202903*x**2)/17592186044416 - (74693*x)/165 + 30023/66
    return y11

def y12(x):
    y12 = - (6342569475213307*x**5)/4503599627370496 + (6887607384662075*x**4)/281474976710656 - (5574190767482401*x**3)/35184372088832 + (8443183108225841*x**2)/17592186044416 - (41194*x)/55 + 7521173591372261/8796093022208
    return y12


plt.plot(x, y1(x), linewidth=1,  label='id_1')
plt.plot(x, y2(x), linewidth=1,  label='id_2')
plt.plot(x, y3(x), linewidth=1,  label='id_3')
plt.plot(x, y4(x), linewidth=1,  label='id_4')
plt.plot(x, y5(x), linewidth=1,  label='id_5')
plt.plot(x, y6(x), linewidth=1,  label='id_6')
plt.plot(x, y7(x), linewidth=1,  label='id_7')
plt.plot(x, y8(x), linewidth=1,  label='id_8')
plt.plot(x, y9(x), linewidth=1,  label='id_9')
plt.plot(x, y10(x), linewidth=1,  label='id_10')
plt.plot(x, y11(x), linewidth=1,  label='id_11')
plt.plot(x, y12(x), linewidth=1,  label='id_12')
plt.legend()
plt.show()




# reference: https://blog.csdn.net/zjjtilm/article/details/79106348
# saved one picture by this code  named "fitting_fucntions_figure.pdf" under robot_skin dir
#
#
#
# *************************************************************************
# NOTE: One way of doing Curve Fitting in MATLAB (use id_1 for eample):
# ref: https://blog.csdn.net/it_beecoder/article/details/78779385
# *************************************************************************
# >> x0 = [0,1,2,3,4,5,6];
# >> p1_value = [936,520,380,333,264,249,238];
# >> y1=polyfit(x0,p1_value,5)  % polynomial fitting, 5 means Degree
# 
# y1 =
#
#    -0.8083   15.0833 -107.4583  373.5833 -699.7333  936.4762
#
# >> syms x f(x)
# >> f(x)=poly2sym(y1,x)
# 
# f(x) =
# 
# - (7280819397581895*x^5)/9007199254740992 + (8491161797437655*x^4)/56294995# 3421312 - (7561707968091103*x^3)/70368744177664 + (3286073751546417*x^2)/87# 96093022208 - (10496*x)/15 + 19666/21
# 
#
## Do this process with other 'id's as well and will get 12 funcions.
#
#
#
# ***********************************************************************
# Getting functions after Curve Fitting:
# ***********************************************************************
#
# y1 = - (7280819397581895*x^5)/9007199254740992 + (8491161797437655*x^4)/562949953421312 - (7561707968091103*x^3)/70368744177664 + (3286073751546417*x^2)/8796093022208 - (10496*x)/15 + 19666/21
#
# y2 = (736526189059573*x^5)/1125899906842624 - (8889918014445273*x^4)/1125899906842624 + (148250817811815*x^3)/8796093022208 + (8401734851712015*x^2)/70368744177664 - (72091*x)/120 + 28659/28
#
# y3 = - (788129934789767*x^5)/2251799813685248 + (4384186000886861*x^4)/562949953421312 - (4928477575170219*x^3)/70368744177664 + (2819814184301079*x^2)/8796093022208 - (846997120970271*x)/1099511627776 + 11252/11
#
# y4 = - (5329259559054581*x^5)/18014398509481984 + (8761974843212149*x^4)/1125899906842624 - (5238873039544805*x^3)/70368744177664 + (2921419054267833*x^2)/8796093022208 - (6423993309030311*x)/8796093022208 + 4116043197637143/4398046511104
#
# y5 = (127*x^5)/120 - (2197*x^4)/132 + (22687*x^3)/264 - (1022145991421549*x^2)/8796093022208 - (50429*x)/165 + 562673885566719/549755813888
#
# y6 = - (5254199565265141*x^5)/9007199254740992 + (6657309676443959*x^4)/562949953421312 - (1647668152023501*x^3)/17592186044416 + (6489784086612153*x^2)/17592186044416 - (51131*x)/66 + 1099076106936427/1099511627776
#
# y7 = - (5085314579239015*x^5)/4503599627370496 + (1393381099199715*x^4)/70368744177664 - (1164832614026103*x^3)/8796093022208 + (3806859099969231*x^2)/8796093022208 - (837142331524647*x)/1099511627776 + 41161/44
#
# y8 = - (47*x^5)/40 + (1397512597437435*x^4)/70368744177664 - (4522124732371681*x^3)/35184372088832 + (1832935861303807*x^2)/4398046511104 - (6801205761839483*x)/8796093022208 + 4436553217029145/4398046511104
#
# y9 = - (13*x^5)/60 + (1797601555811161*x^4)/562949953421312 - (7032609645391697*x^3)/281474976710656 + (39713*x^2)/264 - (4804492645798333*x)/8796093022208 + 2220004412501077/2199023255552
#
# y10 = - (29*x^5)/60 + (1247979016059905*x^4)/140737488355328 - (4473746220749549*x^3)/70368744177664 + (62047*x^2)/264 - (8961379606543403*x)/17592186044416 + 7161980753803047/8796093022208
#
# y11 = - (1989089835421901*x^5)/2251799813685248 + (8836608359764511*x^4)/562949953421312 - (3663172921339397*x^3)/35184372088832 + (5589517293202903*x^2)/17592186044416 - (74693*x)/165 + 30023/66
#
# y12 = - (6342569475213307*x^5)/4503599627370496 + (6887607384662075*x^4)/281474976710656 - (5574190767482401*x^3)/35184372088832 + (8443183108225841*x^2)/17592186044416 - (41194*x)/55 + 7521173591372261/8796093022208
#
#
